# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
# hsencrypt nodejs library to encrypt or decrypt messages using handshake names hsencrypt uses handshake names, a handshake node, and a handshake wallet to encrypt and decrypt names. Using ephemeral keys instead of the original implementation of hsencrypt which used only the static keys, we are able to gain some benefits.  Instead of requiring long term secrecy of two private keys (sender and receiver), the new implementation only requires a long term private key of the receiver.  How to use npm install hsencrypt encrypt(wallet, node, passphrase, name, target, message)  decrypt(wallet, node, passphrase, name, sender, ciphertext) ** encrypt() **   wallet     - Wallet from hsd **   node       - Node from hsd **   passphrase - passphrase for wallet **   name       - my name **   target     - recipient's name **   message    - the message to encrypt ** **   returns pubKey+ciphertext **     pubKey     - an ephemeral public key **     ciphertext - an AEAD encrypted message (chacha20 x poly1305) **     or null ** decrypt() **   wallet          - Wallet from hsd **   node            - Node from hsd **   passphrase      - passphrase for wallet **   name            - my name **   sender          - sender's name **   ciphertext      - ephemeralPubKey + the ciphertext ** **   returns **     string containing the decrypted message **     or null Example You can see it in action in zmsg.  Also, feel free to try the following example which assumes a folder keys includes files node and wallet with the associated api keys inside them. It also, of course, requires hsd, hs-client and consoleinout npms.  #!/usr/bin/env node const {encrypt, decrypt} = require("hsencrypt"); const {WalletClient, NodeClient} = require('hs-client'); const {Network} = require('hsd'); const fs = require('fs'); const network = Network.get('main'); const ConsoleIO = new (require("consoleinout"))(console);  const nodeOptions = {   network: network.type,   port: network.rpcPort,   apiKey: fs.readFileSync("keys/node").toString().trim() } const walletOptions = {   port: network.walletPort,   apiKey: fs.readFileSync("keys/wallet").toString().trim() } const nodeClient = new NodeClient(nodeOptions); const _walletClient = new WalletClient(walletOptions); let walletClient;  (async function() {   const argv=process.argv;   const argc=argv.length;    if(argc!=6 && argc!=7) {     console.log("Encrypt Usage: ",argv[1],"<wallet>","<from>","<to>","\"<msg>\"");     console.log("");     console.log("Decrypt Usage: ",argv[1],"<wallet>","<from>","<to>","\"<encrypted-msg>\"", "\"d\"");     process.exit();   }   walletClient = _walletClient.wallet(argv[2]);   if(!walletClient) {     console.log("Wallet ",argv[2],"not found");     process.exit(0);   }    console.output("Enter Password: ");   const password = await console.input(true);    if(argc==7) {     let decrypted=await decrypt(walletClient, nodeClient, password, argv[4], argv[3], argv[5]);     console.log("Decrypted: ",decrypted);     process.exit(0);   }   else if(argc==6) {     let encrypted=await encrypt(walletClient, nodeClient, password, argv[3], argv[4], argv[5]);     console.log(encrypted);     process.exit(0);   } })() Learn More Discord  Github  License Copyright (c) 2022 Publius Federalist All Rights Reserved  MIT Licensed
# To configure this workflow:

#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '14.x'                # set this to the node version to use

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: node-app
        path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp 
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
